);
		ok( jQuery.getJSON( url("data/json_obj.js"), success ), "json" );
		ok( jQuery.ajax({
			url: url( target ),
			success: success
		}), "generic" );
	});

	ajaxTest( "jQuery.ajax() - cache", 12, function() {

		var re = /_=(.*?)(&|$)/g;

		function request( url, title ) {
			return {
				url: url,
				cache: false,
				beforeSend: function() {
					var parameter, tmp;
					while(( tmp = re.exec( this.url ) )) {
						strictEqual( parameter, undefined, title + ": only one 'no-cache' parameter" );
						parameter = tmp[ 1 ];
						notStrictEqual( parameter, "tobereplaced555", title + ": parameter (if it was there) was replaced" );
					}
					return false;
				},
				error: true
			};
		}

		return [
			request(
				"data/text.php",
				"no parameter"
			),
			request(
				"data/text.php?pizza=true",
				"1 parameter"
			),
			request(
				"data/text.php?_=tobereplaced555",
				"_= parameter"
			),
			request(
				"data/text.php?pizza=true&_=tobereplaced555",
				"1 parameter and _="
			),
			request(
				"data/text.php?_=tobereplaced555&tv=false",
				"_= and 1 parameter"
			),
			request(
				"data/text.php?name=David&_=tobereplaced555&washere=true",
				"2 parameters surrounding _="
			)
		];
	});

	jQuery.each( [ " - Same Domain", " - Cross Domain" ], function( crossDomain, label ) {

		ajaxTest( "jQuery.ajax() - JSONP - Query String (?n)" + label, 4, [
			{
				url: "data/jsonp.php?callback=?",
				dataType: "jsonp",
				crossDomain: crossDomain,
				success: function( data ) {
					ok( data.data, "JSON results returned (GET, url callback)" );
				}
			},
			{
				url: "data/jsonp.php?callback=??",
				dataType: "jsonp",
				crossDomain: crossDomain,
				success: function( data ) {
					ok( data.data, "JSON results returned (GET, url context-free callback)" );
				}
			},
			{
				url: "data/jsonp.php/??",
				dataType: "jsonp",
				crossDomain: crossDomain,
				success: function( data ) {
					ok( data.data, "JSON results returned (GET, REST-like)" );
				}
			},
			{
				url: "data/jsonp.php/???json=1",
				dataType: "jsonp",
				crossDomain: crossDomain,
				success: function( data ) {
					strictEqual( jQuery.type( data ), "array", "JSON results returned (GET, REST-like with param)" );
				}
			}
		]);

		ajaxTest( "jQuery.ajax() - JSONP - Explicit callback param" + label, 9, {
			setup: function() {
				Globals.register("functionToCleanUp");
				Globals.register("XXX");
				Globals.register("jsonpResults");
				window["jsonpResults"] = function( data ) {
					ok( data["data"], "JSON results returned (GET, custom callback function)" );
				};
			},
			requests: [{
				url: "data/jsonp.php",
				dataType: "jsonp",
				crossDomain: crossDomain,
				jsonp: "callback",
				success: function( data ) {
					ok( data["data"], "JSON results returned (GET, data obj callback)" );
				}
			}, {
				url: "data/jsonp.php",
				dataType: "jsonp",
				crossDomain: crossDomain,
				jsonpCallback: "jsonpResults",
				success: function( data ) {
					ok( data.data, "JSON results returned (GET, custom callback name)" );
				}
			}, {
				url: "data/jsonp.php",
				dataType: "jsonp",
				crossDomain: crossDomain,
				jsonpCallback: "functionToCleanUp",
				success: function( data ) {
					ok( data["data"], "JSON results returned (GET, custom callback name to be cleaned up)" );
					strictEqual( window["functionToCleanUp"], undefined, "Callback was removed (GET, custom callback name to be cleaned up)" );
					var xhr;
					jQuery.ajax({
						url: "data/jsonp.php",
						dataType: "jsonp",
						crossDomain: crossDomain,
						jsonpCallback: "functionToCleanUp",
						beforeSend: function( jqXHR ) {
							xhr = jqXHR;
							return false;
						}
					});
					xhr.fail(function() {
						ok( true, "Ajax error JSON (GET, custom callback name to be cleaned up)" );
						strictEqual( window["functionToCleanUp"], undefined, "Callback was removed after early abort (GET, custom callback name to be cleaned up)" );
					});
				}
			}, {
				url: "data/jsonp.php?callback=XXX",
				dataType: "jsonp",
				jsonp: false,
				jsonpCallback: "XXX",
				crossDomain: crossDomain,
				beforeSend: function() {
					ok( /^data\/jsonp.php\?callback=XXX&_=\d+$/.test( this.url ), "The URL wasn't messed with (GET, custom callback name with no url manipulation)" );
				},
				success: function( data ) {
					ok( data["data"], "JSON results returned (GET, custom callback name with no url manipulation)" );
				}
			}]
		});

		ajaxTest( "jQuery.ajax() - JSONP - Callback in data" + label, 2, [
			{
				url: "data/jsonp.php",
				dataType: "jsonp",
				crossDomain: crossDomain,
				data: "callback=?",
				success: function( data ) {
					ok( data.data, "JSON results returned (GET, data callback)" );
				}
			},
			{
				url: "data/jsonp.php",
				dataType: "jsonp",
				crossDomain: crossDomain,
				data: "callback=??",
				success: function( data ) {
					ok( data.data, "JSON results returned (GET, data context-free callback)" );
				}
			}
		]);


		ajaxTest( "jQuery.ajax() - JSONP - POST" + label, 3, [
			{
				type: "POST",
				url: "data/jsonp.php",
				dataType: "jsonp",
				crossDomain: crossDomain,
				success: function( data ) {
					ok( data["data"], "JSON results returned (POST, no callback)" );
				}
			},
			{
				type: "POST",
				url: "data/jsonp.php",
				data: "callback=?",
				dataType: "jsonp",
				crossDomain: crossDomain,
				success: function( data ) {
					ok( data["data"], "JSON results returned (POST, data callback)" );
				}
			},
			{
				type: "POST",
				url: "data/jsonp.php",
				jsonp: "callback",
				dataType: "jsonp",
				crossDomain: crossDomain,
				success: function( data ) {
					ok( data["data"], "JSON results returned (POST, data obj callback)" );
				}
			}
		]);

		ajaxTest( "jQuery.ajax() - JSONP" + label, 3, [
			{
				url: "data/jsonp.php",
				dataType: "jsonp",
				crossDomain: crossDomain,
				success: function( data ) {
					ok( data.data, "JSON results returned (GET, no callback)" );
				}
			},
			{
				create: function( options ) {
					var request = jQuery.ajax( options ),
						promise = request.then(function( data ) {
							ok( data.data, "first request: JSON results returned (GET, no callback)" );
							request = jQuery.ajax( this ).done(function( data ) {
								ok( data.data, "this re-used: JSON results returned (GET, no callback)" );
							});
							promise.abort = request.abort;
							return request;
						});
					promise.abort = request.abort;
					return promise;
				},
				url: "data/jsonp.php",
				dataType: "jsonp",
				crossDomain: crossDomain,
				success: true
			}
		]);

	});

	ajaxTest( "jQuery.ajax() - script, Remote", 2, {
		setup: function() {
			Globals.register("testBar");
		},
		url: window.location.href.replace( /[^\/]*$/, "" ) + "data/test.js",
		dataType: "script",
		success: function() {
			strictEqual( window["testBar"], "bar", "Script results returned (GET, no callback)" );
		}
	});

	ajaxTest( "jQuery.ajax() - script, Remote with POST", 3, {
		setup: function() {
			Globals.register("testBar");
		},
		url: window.location.href.replace( /[^\/]*$/, "" ) + "data/test.js",
		type: "POST",
		dataType: "script",
		success: function( data, status ) {
			strictEqual( window["testBar"], "bar", "Script results returned (POST, no callback)" );
			strictEqual( status, "success", "Script results returned (POST, no callback)" );
		}
	});

	ajaxTest( "jQuery.ajax() - script, Remote with scheme-less URL", 2, {
		setup: function() {
			Globals.register("testBar");
		},
		url: window.location.href.replace( /[^\/]*$/, "" ).replace( /^.*?\/\//, "//" ) + "data/test.js",
		dataType: "script",
		success: function() {
			strictEqual( window["testBar"], "bar", "Script results returned (GET, no callback)" );
		}
	});

	ajaxTest( "jQuery.ajax() - malformed JSON", 2, {
		url: "data/badjson.js",
		dataType: "json",
		error: function( xhr, msg, detailedMsg ) {
			strictEqual( msg, "parsererror", "A parse error occurred." );
			ok( /(invalid|error|exception)/i.test( detailedMsg ), "Detailed parsererror message provided" );
		}
	});

	ajaxTest( "jQuery.ajax() - script by content-type", 2, [
		{
			url: "data/script.php",
			data: {
				"header": "script"
			},
			success: true
		},
		{
			url: "data/script.php",
			data: {
				"header": "ecma"
			},
			success: true
		}
	]);

	ajaxTest( "jQuery.ajax() - JSON by content-type", 5, {
		url: "data/json.php",
		data: {
			"header": "json",
			"json": "array"
		},
		success: function( json ) {
			ok( json.length >= 2, "Check length" );
			strictEqual( json[ 0 ]["name"], "John", "Check JSON: first, name" );
			strictEqual( json[ 0 ]["age"], 21, "Check JSON: first, age" );
			strictEqual( json[ 1 ]["name"], "Peter", "Check JSON: second, name" );
			strictEqual( json[ 1 ]["age"], 25, "Check JSON: second, age" );
		}
	});

	ajaxTest( "jQuery.ajax() - JSON by content-type disabled with options", 6, {
		url: url("data/json.php"),
		data: {
			"header": "json",
			"json": "array"
		},
		contents: {
			"json": false
		},
		success: function( text ) {
			strictEqual( typeof text, "string", "json wasn't auto-determined" );
			var json = jQuery.parseJSON( text );
			ok( json.length >= 2, "Check length");
			strictEqual( json[ 0 ]["name"], "John", "Check JSON: first, name" );
			strictEqual( json[ 0 ]["age"], 21, "Check JSON: first, age" );
			strictEqual( json[ 1 ]["name"], "Peter", "Check JSON: second, name" );
			strictEqual( json[ 1 ]["age"], 25, "Check JSON: second, age" );
		}
	});

	ajaxTest( "jQuery.ajax() - simple get", 1, {
		type: "GET",
		url: url("data/name.php?name=foo"),
		success: function( msg ) {
			strictEqual( msg, "bar", "Check for GET" );
		}
	});

	ajaxTest( "jQuery.ajax() - simple post", 1, {
		type: "POST",
		url: url("data/name.php"),
		data: "name=peter",
		success: function( msg ) {
			strictEqual( msg, "pan", "Check for POST" );
		}
	});

	ajaxTest( "jQuery.ajax() - data option - empty bodies for non-GET requests", 1, {
		url: "data/echoData.php",
		data: undefined,
		type: "post",
		success: function( result ) {
			strictEqual( result, "" );
		}
	});

	var ifModifiedNow = new Date();

	jQuery.each(
		/* jQuery.each arguments start */
		{
			" (cache)": true,
			" (no cache)": false
		},
		function( label, cache ) {
			var isOpera = !!window.opera;

			asyncTest( "jQuery.ajax() - If-Modified-Since support" + label, 3, function() {
				var url = "data/if_modified_since.php?ts=" + ifModifiedNow++;

				jQuery.ajax({
					url: url,
					ifModified: true,
					cache: cache,
					success: function( data, status ) {
						strictEqual( status, "success" );

						jQuery.ajax({
							url: url,
							ifModified: true,
							cache: cache,
							success: function( data, status ) {
								if ( data === "FAIL" ) {
									ok( isOpera, "Opera is incapable of doing .setRequestHeader('If-Modified-Since')." );
									ok( isOpera, "Opera is incapable of doing .setRequestHeader('If-Modified-Since')." );
								} else {
									strictEqual( status, "notmodified" );
									ok( data == null, "response body should be empty" );
								}
								start();
							},
							error: function() {
								// Do this because opera simply refuses to implement 304 handling :(
								// A feature-driven way of detecting this would be appreciated
								// See: http://gist.github.com/599419
								ok( isOpera, "error" );
								ok( isOpera, "error" );
								start();
							}
						});
					},
					error: function() {
						strictEqual( false, "error" );
						// Do this because opera simply refuses to implement 304 handling :(
						// A feature-driven way of detecting this would be appreciated
						// See: http://gist.github.com/599419
						ok( isOpera, "error" );
						start();
					}
				});
			});

			asyncTest( "jQuery.ajax() - Etag support" + label, 3, function() {
				var url = "data/etag.php?ts=" + ifModifiedNow++;

				jQuery.ajax({
					url: url,
					ifModified: true,
					cache: cache,
					success: function( data, status ) {
						strictEqual( status, "success" );

						jQuery.ajax({
							url: url,
							ifModified: true,
							cache: cache,
							success: function( data, status ) {
								if ( data === "FAIL" ) {
									ok( isOpera, "Opera is incapable of doing .setRequestHeader('If-None-Match')." );
									ok( isOpera, "Opera is incapable of doing .setRequestHeader('If-None-Match')." );
								} else {
									strictEqual( status, "notmodified" );
									ok( data == null, "response body should be empty" );
								}
								start();
							},
							error: function() {
								// Do this because opera simply refuses to implement 304 handling :(
								// A feature-driven way of detecting this would be appreciated
								// See: http://gist.github.com/599419
								ok( isOpera, "error" );
								ok( isOpera, "error" );
								start();
							}
						});
					},
					error: function() {
						// Do this because opera simply refuses to implement 304 handling :(
						// A feature-driven way of detecting this would be appreciated
						// See: http://gist.github.com/599419
						ok( isOpera, "error" );
						start();
					}
				});
			});
		}
		/* jQuery.each arguments end */
	);

	ajaxTest( "jQuery.ajax() - failing cross-domain (non-existing)", 1, {
		// see RFC 2606
		url: "http://example.invalid",
		error: function( xhr, _, e ) {
			ok( true, "file not found: " + xhr.status + " => " + e );
		}
	});

	ajaxTest( "jQuery.ajax() - failing cross-domain", 1, {
		url: "http://" + externalHost,
		error: function( xhr, _, e ) {
			ok( true, "access denied: " + xhr.status + " => " + e );
		}
	});

	ajaxTest( "jQuery.ajax() - atom+xml", 1, {
		url: url("data/atom+xml.php"),
		success: function() {
			ok( true, "success" );
		}
	});

	asyncTest( "jQuery.ajax() - statusText", 3, function() {
		jQuery.ajax( url("data/statusText.php?status=200&text=Hello") ).done(function( _, statusText, jqXHR ) {
			strictEqual( statusText, "success", "callback status text ok for success" );
			ok( jqXHR.statusText === "Hello" || jqXHR.statusText === "OK", "jqXHR status text ok for success (" + jqXHR.statusText + ")" );
			jQuery.ajax( url("data/statusText.php?status=404&text=World") ).fail(function( jqXHR, statusText ) {
				strictEqual( statusText, "error", "callback status text ok for error" );
				// ok( jqXHR.statusText === "World" || jQuery.browser.safari && jqXHR.statusText === "Not Found", "jqXHR status text ok for error (" + jqXHR.statusText + ")" );
				start();
			});
		});
	});

	asyncTest( "jQuery.ajax() - statusCode", 20, function() {

		var count = 12;

		function countComplete() {
			if ( ! --count ) {
				start();
			}
		}

		function createStatusCodes( name, is