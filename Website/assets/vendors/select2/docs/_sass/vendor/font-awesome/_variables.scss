tusCode = {};
						statusCode[ jqXHR.status ] = function() {
							testString += "B";
						};
						jqXHR.statusCode( statusCode );
						testString += "A";
					},
					error: function( jqXHR ) {
						ok( !isSuccess, "error" );
						var statusCode = {};
						statusCode[ jqXHR.status ] = function() {
							testString += "B";
						};
						jqXHR.statusCode( statusCode );
						testString += "A";
					},
					complete: function() {
						strictEqual(
							testString,
							"AB",
							"Test statusCode callbacks are ordered like " + ( isSuccess ? "success" :  "error" ) + " callbacks"
						);
						countComplete();
					}
				});

			}
			/* jQuery.each arguments end*/
		);
	});

	ajaxTest( "jQuery.ajax() - transitive conversions", 8, [
		{
			url: url("data/json.php"),
			converters: {
				"json myJson": function( data ) {
					ok( true, "converter called" );
					return data;
				}
			},
			dataType: "myJson",
			success: function() {
				ok( true, "Transitive conversion worked" );
				strictEqual( this.dataTypes[ 0 ], "text", "response was retrieved as text" );
				strictEqual( this.dataTypes[ 1 ], "myjson", "request expected myjson dataType" );
			}
		},
		{
			url: url("data/json.php"),
			converters: {
				"json myJson": function( data ) {
					ok( true, "converter called (*)" );
					return data;
				}
			},
			contents: false, /* headers are wrong so we ignore them */
			dataType: "* myJson",
			success: function() {
				ok( true, "Transitive conversion worked (*)" );
				strictEqual( this.dataTypes[ 0 ], "text", "response was retrieved as text (*)" );
				strictEqual( this.dataTypes[ 1 ], "myjson", "request expected myjson dataType (*)" );
			}
		}
	]);

	ajaxTest( "jQuery.ajax() - overrideMimeType", 2, [
		{
			url: url("data/json.php"),
			beforeSend: function( xhr ) {
				xhr.overrideMimeType( "application/json" );
			},
			success: function( json ) {
				ok( json.data, "Mimetype overridden using beforeSend" );
			}
		},
		{
			url: url("data/json.php"),
			mimeType: "application/json",
			success: function( json ) {
				ok( json.data, "Mimetype overridden using mimeType option" );
			}
		}
	]);

	ajaxTest( "jQuery.ajax() - empty json gets to error callback instead of success callback.", 1, {
		url: url("data/echoData.php"),
		error: function( _, __, error ) {
			equal( typeof error === "object", true,  "Didn't get back error object for empty json response" );
		},
		dataType: "json"
	});

	ajaxTest( "#2688 - jQuery.ajax() - beforeSend, cancel request", 2, {
		create: function() {
			return jQuery.ajax({
				url: url("data/name.html"),
				beforeSend: function() {
					ok( true, "beforeSend got called, canceling" );
					return false;
				},
				success: function() {
					ok( false, "request didn't get canceled" );
				},
				complete: function() {
					ok( false, "request didn't get canceled" );
				},
				error: function() {
					ok( false, "request didn't get canceled" );
				}
			});
		},
		fail: function( _, reason ) {
			strictEqual( reason, "canceled", "canceled request must fail with 'canceled' status text" );
		}
	});

	ajaxTest( "#2806 - jQuery.ajax() - data option - evaluate function values", 1, {
		url: "data/echoQuery.php",
		data: {
			key: function() {
				return "value";
			}
		},
		success: function( result ) {
			strictEqual( result, "key=value" );
		}
	});

	test( "#7531 - jQuery.ajax() - Location object as url", 1, function () {
		var xhr,
			success = false;
		try {
			xhr = jQuery.ajax({
				url: window.location
			});
			success = true;
			xhr.abort();
		} catch (e) {

		}
		ok( success, "document.location did not generate exception" );
	});

	jQuery.each( [ " - Same Domain", " - Cross Domain" ], function( crossDomain, label ) {
		ajaxTest( "#7578 - jQuery.ajax() - JSONP - default for cache option" + label, 1, {
			url: "data/jsonp.php",
			dataType: "jsonp",
			crossDomain: crossDomain,
			beforeSend: function() {
				strictEqual( this.cache, false, "cache must be false on JSON request" );
				return false;
			},
			error: true
		});
	});

	ajaxTest( "#8107 - jQuery.ajax() - multiple method signatures introduced in 1.5", 4, [
		{
			create: function() {
				return jQuery.ajax();
			},
			done: function() {
				ok( true, "With no arguments" );
			}
		},
		{
			create: function() {
				return jQuery.ajax("data/name.html");
			},
			done: function() {
				ok( true, "With only string URL argument" );
			}
		},
		{
			create: function() {
				return jQuery.ajax( "data/name.html", {});
			},
			done: function() {
				ok( true, "With string URL param and map" );
			}
		},
		{
			create: function( options ) {
				return jQuery.ajax( options );
			},
			url: "data/name.html",
			success: function() {
				ok( true, "With only map" );
			}
		}
	]);

	jQuery.each( [ " - Same Domain", " - Cross Domain" ], function( crossDomain, label ) {
		ajaxTest( "#8205 - jQuery.ajax() - JSONP - re-use callbacks name" + label, 2, {
			url: "data/jsonp.php",
			dataType: "jsonp",
			crossDomain: crossDomain,
			beforeSend: function( jqXHR, s ) {
				s.callback = s.jsonpCallback;
			},
			success: function() {
				var previous = this;
				strictEqual( previous.jsonpCallback, undefined, "jsonpCallback option is set back to default in callbacks" );
				jQuery.ajax({
					url: "data/jsonp.php",
					dataType: "jsonp",
					crossDomain: crossDomain,
					beforeSend: function() {
						strictEqual( this.jsonpCallback, previous.callback, "JSONP callback name is re-used" );
						return false;
					}
				});
			}
		});
	});

	test( "#9887 - jQuery.ajax() - Context with circular references (#9887)", 2, function () {
		var success = false,
			context = {};
		context.field = context;
		try {
			jQuery.ajax( "non-existing", {
				context: context,
				beforeSend: function() {
					ok( this === context, "context was not deep extended" );
					return false;
				}
			});
			success = true;
		} catch ( e ) {
			console.log( e );
		}
		ok( success, "context with circular reference did not generate an exception" );
	});

	jQuery.each( [ "as argument", "in settings object" ], function( inSetting, title ) {

		function request( url, test ) {
			return {
				create: function() {
					return jQuery.ajax( inSetting ? { url: url } : url );
				},
				done: function() {
					ok( true, ( test || url ) + " " + title );
				}
			};
		}

		ajaxTest( "#10093 - jQuery.ajax() - falsy url " + title, 4, [
			request( "", "empty string" ),
			request( false ),
			request( null ),
			request( undefined )
		]);

	});

	ajaxTest( "#11151 - jQuery.ajax() - parse error body", 2, {
		url: url("data/errorWithJSON.php"),
		dataFilter: function( string ) {
			ok( false, "dataFilter called" );
			return string;
		},
		error: function( jqXHR ) {
			strictEqual( jqXHR.responseText, "{ \"code\": 40, \"message\": \"Bad Request\" }", "Error body properly set" );
			deepEqual( jqXHR.responseJSON, { code: 40, message: "Bad Request" }, "Error body properly parsed" );
		}
	});

	ajaxTest( "#11426 - jQuery.ajax() - loading binary data shouldn't throw an exception in IE", 1, {
		url: url("data/1x1.jpg"),
		success: function( data ) {
			ok( data === undefined || /JFIF/.test( data ), "success callback reached" );
		}
	});

	test( "#11743 - jQuery.ajax() - script, throws exception", 1, function() {
		raises(function() {
			jQuery.ajax({
				url: "data/badjson.js",
				dataType: "script",
				throws: true,
				// TODO find a way to test this asynchronously, too
				async: false,
				// Global events get confused by the exception
				global: false,
				success: function() {
					ok( false, "Success." );
				},
				error: function() {
					ok( false, "Error." );
				}
			});
		}, "exception bubbled" );
	});

	jQuery.each( [ "method", "type" ], function( _, globalOption ) {

		function request( option ) {
			var options = {
					url: url("data/echoData.php"),
					data: "hello",
					success: function( msg ) {
						strictEqual( msg, "hello", "Check for POST (no override)" );
					}
				};
			if ( option ) {
				options[ option ] = "GET";
				options.success = function( msg ) {
					strictEqual( msg, "", "Check for no POST (overriding with " + option + ")" );
				};
			}
			return options;
		}

		ajaxTest( "#12004 - jQuery.ajax() - method is an alias of type - " + globalOption + " set globally", 3, {
			setup: function() {
				var options = {};
				options[ globalOption ] = "POST";
				jQuery.ajaxSetup( options );
			},
			requests: [
				request("type"),
				request("method"),
				request()
			]
		});

	});

	ajaxTest( "#13276 - jQuery.ajax() - compatibility between XML documents from ajax requests and parsed string", 1, {
		url: "data/dashboard.xml",
		dataType: "xml",
		success: function( ajaxXML ) {
			var parsedXML = jQuery( jQuery.parseXML("<tab title=\"Added\">blibli</tab>") ).find("tab");
			ajaxXML = jQuery( ajaxXML );
			try {
				ajaxXML.find("infowindowtab").append( parsedXML );
			} catch( e ) {
				strictEqual( e, undefined, "error" );
				return;
			}
			strictEqual( ajaxXML.find("tab").length, 3, "Parsed node was added properly" );
		}
	});

	ajaxTest( "#13292 - jQuery.ajax() - converter is bypassed for 204 requests", 3, {
		url: "data/nocontent.php",
		dataType: "testing",
		converters: {
			"* testing": function() {
				throw "converter was called";
			}
		},
		success: function( data, status, jqXHR ) {
			strictEqual( jqXHR.status, 204, "status code is 204" );
			strictEqual( status, "nocontent", "status text is 'nocontent'" );
			strictEqual( data, undefined, "data is undefined" );
		},
		error: function( _, status, error ) {
			ok( false, "error" );
			strictEqual( status, "parsererror", "Parser Error" );
			strictEqual( error, "converter was called", "Converter was called" );
		}
	});

	ajaxTest( "#13388 - jQuery.ajax() - responseXML", 3, {
		url: url("data/with_fries.xml"),
		dataType: "xml",
		success: function( resp, _, jqXHR ) {
			notStrictEqual( resp, undefined, "XML document exists" );
			ok( "responseXML" in jqXHR, "jqXHR.responseXML exists" );
			strictEqual( resp, jqXHR.responseXML, "jqXHR.responseXML is set correctly" );
		}
	});

	ajaxTest( "#13922 - jQuery.ajax() - converter is bypassed for HEAD requests", 3, {
		url: "data/json.php",
		method: "HEAD",
		data: {
			header: "yes"
		},
		converters: {
			"text json": function() {
				throw "converter was called";
			}
		},
		success: function( data, status ) {
			ok( true, "success" );
			strictEqual( status, "nocontent", "data is undefined" );
			strictEqual( data, undefined, "data is undefined" );
		},
		error: function( _, status, error ) {
			ok( false, "error" );
			strictEqual( status, "parsererror", "Parser Error" );
			strictEqual( error, "converter was called", "Converter was called" );
		}
	} );

//----------- jQuery.ajaxPrefilter()

	ajaxTest( "jQuery.ajaxPrefilter() - abort", 1, {
		setup: function() {
			jQuery.ajaxPrefilter(function( options, _, jqXHR ) {
				if ( options.abortInPrefilter ) {
					jqXHR.abort();
				}
			});
		},
		abortInPrefilter: true,
		error: function() {
			ok( false, "error callback called" );
		},
		fail: function( _, reason ) {
			strictEqual( reason, "canceled", "Request aborted by the prefilter must fail with 'canceled' status text" );
		}
	});

//----------- jQuery.ajaxSetup()

	asyncTest( "jQuery.ajaxSetup()", 1, function() {
		jQuery.ajaxSetup({
			url: url("data/name.php?name=foo"),
			success: function( msg ) {
				strictEqual( msg, "bar", "Check for GET" );
				start();
			}
		});
		jQuery.ajax();
	});

	asyncTest( "jQuery.ajaxSetup({ timeout: Number }) - with global timeout", 2, function() {
		var passed = 0,
			pass = function() {
				ok( passed++ < 2, "Error callback executed" );
				if ( passed === 2 ) {
					jQuery( document ).off("ajaxError.setupTest");
					start();
				}
			},
			fail = function( a, b ) {
				ok( false, "Check for timeout failed " + a + " " + b );
				start();
			};

		jQuery( document ).on( "ajaxError.setupTest", pass );

		jQuery.ajaxSetup({
			timeout: 1000
		});

		jQuery.ajax({
			type: "GET",
			url: url("data/name.php?wait=5"),
			error: pass,
			success: fail
		});
	});

	asyncTest( "jQuery.ajaxSetup({ timeout: Number }) with localtimeout", 1, function() {
		jQuery.ajaxSetup({
			timeout: 50
		});
		jQuery.ajax({
			type: "GET",
			timeout: 15000,
			url: url("data/name.php?wait=1"),
			error: function() {
				ok( false, "Check for local timeout failed" );
				start();
			},
			success: function() {
				ok( true, "Check for local timeout" );
				start();
			}
		});
	});

//----------- jQuery.domManip()

	test( "#11264 - jQuery.domManip() - no side effect because of ajaxSetup or global events", 1, function() {
		jQuery.ajaxSetup({
			type: "POST"
		});

		jQuery( document ).on( "ajaxStart ajaxStop", function() {
			ok( false, "Global event triggered" );
		});

		jQuery("#qunit-fixture").append("<script src='data/evalScript.php'></script>");

		jQuery( document ).off("ajaxStart ajaxStop");
	});

	asyncTest( "#11402 - jQuery.domManip() - script in comments are properly evaluated", 2, function() {
		jQuery("#qunit-fixture").load( "data/cleanScript.html", start );
	});

//----------- jQuery.get()

	asyncTest( "jQuery.get( String, Hash, Function ) - parse xml and use text() on nodes", 2, function() {
		jQuery.get( url("data/dashboard.xml"), function( xml ) {
			var content = [];
			jQuery( "tab", xml ).each(function() {
				content.push( jQuery( this ).text() );
			});
			strictEqual( content[ 0 ], "blabla", "Check first tab" );
			strictEqual( content[ 1 ], "blublu", "Check second tab" );
			start();
		});
	});

	asyncTest( "#8277 - jQuery.get( String, Function ) - data in ajaxSettings", 1, function() {
		jQuery.ajaxSetup({
			data: "helloworld"
		});
		jQuery.get( url("data/echoQuery.php"), function( data ) {
			ok( /helloworld$/.test( data ), "Data from ajaxSettings was used" );
			start();
		});
	});

//----------- jQuery.getJSON()

	asyncTest( "jQuery.getJSON( String, Hash, Function ) - JSON array", 5, function() {
		jQuery.getJSON(
			url("data/json.php"),
			{
				"json": "array"
			},
			function( json ) {
				ok( json.length >= 2, "Check length" );
				strictEqual( json[ 0 ]["name"], "John", "Check JSON: first, name" );
				strictEqual( json[ 0 ]["age"], 21, "Check JSON: first, age" );
				strictEqual( json[ 1 ]["name"], "Peter", "Check JSON: second, name" );
				strictEqual( json[ 1 ]["age"], 25, "Check JSON: second, age" );
				start();
			}
		);
	});

	asyncTest( "jQuery.getJSON( String, Function ) - JSON object", 2, function() {
		jQuery.getJSON( url("data/json.php"), function( json ) {
			if ( json && json["data"] ) {
				strictEqual( json["data"]["lang"], "en", "Check JSON: lang" );
				strictEqual( json["data"].length, 25, "Check JSON: length" );
				start();
			}
		});
	});

	asyncTest( "jQuery.getJSON() - Using Native JSON", 2, function() {
		var restore = "JSON" in window,
			old = window.JSON;
		if ( !restore ) {
			Globals.register("JSON");
		}
		window.JSON = {
			parse: function() {
				ok( true, "Verifying that parse method was run" );
				window.JSON = old;
				return true;
			}
		};
		jQuery.getJSON( url("data/json.php"), function( json ) {
			strictEqual( json, true, "Verifying return value" );
			start();
		});
	});

	asyncTest( "jQuery.getJSON( String, Function ) - JSON object with absolute url to local content", 2, function() {
		jQuery.getJSON( url( window.location.href.replace( /[^\/]*$/, "" ) + "data/json.php" ), function( json ) {
			strictEqual( json.data.lang, "en", "Check JSON: lang" );
			strictEqual( json.data.length, 25, "Check JSON: length" );
			start();
		});
	});

//----------- jQuery.getScript()

	asyncTest( "jQuery.getScript( String, Function ) - with callback", 2, function() {
		Globals.register("testBar");
		jQuery.getScript( url("data/test.js"), function() {
			strictEqual( window["testBar"], "bar", "Check if script was evaluated" );
			start();
		});
	});

	asyncTest( "jQuery.getScript( String, Function ) - no callback", 1, function() {
		Globals.register("testBar");
		jQuery.getScript( url("data/test.js") ).done( start );
	});

	asyncTest( "#8082 - jQuery.getScript( String, Function ) - source as responseText", 2, function() {
		Globals.register("testBar");
		jQuery.getScript( url("data/test.js"), function( data, _, jqXHR ) {
			strictEqual( data, jqXHR.responseText, "Same-domain script requests returns the source of the script" );
			start();
		});
	});

//----------- jQuery.fn.load()

	// check if load can be called with only url
	asyncTest( "jQuery.fn.load( String )", 2, function() {
		jQuery.ajaxSetup({
			beforeSend: function() {
				strictEqual( this.type, "GET", "no data means GET request" );
			}
		});
		jQuery("#first").load( "data/name.html", start );
	});

	asyncTest( "jQuery.fn.load() - 404 error callbacks", 6, function() {
		addGlobalEvents("ajaxStart ajaxStop ajaxSend ajaxComplete ajaxError")();
		jQuery( document ).ajaxStop( start );
		jQuery("<div/>").load( "data/404.html", function() {
			ok( true, "complete" );
		});
	});

	// check if load can be called with url and null data
	asyncTest( "jQuery.fn.load( String, null )", 2, function() {
		jQuery.ajaxSetup({
			beforeSend: function() {
				strictEqual( this.type, "GET", "no data means GET request" );
			}
		});
		jQuery("#first").load( "data/name.html", null, start );
	});

	// check if load can be called with url and undefined data
	asyncTest( "jQuery.fn.load( String, undefined )", 2, function() {
		jQuery.ajaxSetup({
			beforeSend: function() {
				strictEqual( this.type, "GET", "no data means GET request" );
			}
		});
		jQuery("#first").load( "data/name.html", undefined, start );
	});

	// check if load can be called with only url
	asyncTest( "jQuery.fn.load( URL_SELECTOR )", 1, function() {
		jQuery("#first").load( "data/test3.html div.user", function() {
			strictEqual( jQuery( this ).children("div").length, 2, "Verify that specific elements were injected" );
			start();
		});
	});

	asyncTest( "jQuery.fn.load( String, Function ) - simple: inject text into DOM", 2, function() {
		jQuery("#first").load( url("data/name.html"), function() {
			ok( /^ERROR/.test(jQuery("#first").text()), "Check if content was injected into the DOM" );
			start();
		});
	});

	asyncTest( "jQuery.fn.load( String, Function ) - check scripts", 7, function() {
		var verifyEvaluation = function() {
			strictEqual( window["testBar"], "bar", "Check if script src was evaluated after load" );
			strictEqual( jQuery("#ap").html(), "bar", "Check if script evaluation has modified DOM");
			start();
		};

		Globals.register("testFoo");
		Globals.register("testBar");

		jQuery("#first").load( url("data/test.html"), function() {
			ok( jQuery("#first").html().match( /^html text/ ), "Check content after loading html" );
			strictEqual( jQuery("#foo").html(), "foo", "Check if script evaluation has modified DOM" );
			strictEqual( window["testFoo"], "foo", "Check if script was evaluated after load" );
			setTimeout( verifyEvaluation, 600 );
		});
	});

	asyncTest( "jQuery.fn.load( String, Function ) - check file with only a script tag", 3, function() {
		Globals.register("testFoo");

		jQuery("#first").load( url("data/test2.html"), function() {
			strictEqual( jQuery("#foo").html(), "foo", "Check if script evaluation has modified DOM");
			strictEqual( window["testFoo"], "foo", "Check if script was evaluated after load" );
			start();
		});
	});

	asyncTest( "jQuery.fn.load( String, Function ) - dataFilter in ajaxSettings", 2, function() {
		jQuery.ajaxSetup({
			dataFilter: function() {
				return "Hello World";
			}
		});
		jQuery("<div/>").load( url("data/name.html"), function( responseText ) {
			strictEqual( jQuery( this ).html(), "Hello World", "Test div was filled with filtered data" );
			strictEqual( responseText, "Hello World", "Test callback receives filtered data" );